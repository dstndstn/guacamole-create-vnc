#! /usr/bin/python3

'''
#! /bin/bash
#/cm/shared/apps/slurm/19.05.8/bin/sbatch
cd
/etc/guacamole/sbatch -p sharedq -J vncserver --ntasks 1 --time 7-00:00:00 --cpus-per-task 4 --mem 8GB --verbose /cm/shared/apps/guacamole/bin/run-vnc
'''

import os
import sys
import subprocess
import re

##### pyslurm...?   https://github.com/PySlurm/pyslurm/tree/19.05.0

def main():
    print()
    print('Launching a Remote Desktop session for you...')
    print()
    # cd ~ so that the slurm log file goes somewhere we have write permission!
    homedir = os.path.expanduser('~')
    os.chdir(homedir)

    #/cm/shared/apps/slurm/19.05.8/bin/sbatch
    cmd = ['/etc/guacamole/sbatch', '-p', 'sharedq', '-J', 'vncserver',
           '--ntasks', '1',
           #'--time', '7-00:00:00',
           '--time', '1-00:00:00',
           '--cpus-per-task', '4',
           '--mem', '8GB',
           #'--verbose',
           #/cm/shared/apps/guacamole/bin/run-vnc
           '/etc/guacamole/run-vnc']
    print('Running:', ' '.join(cmd))
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                         universal_newlines=True)
    s,e = p.communicate()
    jobid = None
    for line in e.split('\n'):
        print(line)
    for line in s.split('\n'):
        print(line)
        ## FRAGILE -- look for a line from Slurm...
        if line.startswith('Submitted batch job'):
            words = line.split()
            jobid = words[-1]
            jobid = int(jobid)
            #print('Found jobid', jobid)
    if p.returncode != 0:
        return p.returncode
    if jobid is None:
        print('Failed to find Slurm job id')
        return -1

    jobfn = 'slurm-%i.out' % jobid
    print()
    print('Waiting for job to start (file %s)...' % jobfn)
    print()
    #homedir = os.path.expanduser('~')
    for i in range(60):
        import time
        # poke the filesystem
        os.listdir()
        # does the slurm log file exist yet?
        if os.path.exists(jobfn):
            break
        print('.', flush=True, end='')
        time.sleep(2.)
    print()
    # "New 'cn002:29 (dlang)' desktop is cn002:29"
    print('Remote Desktop job started - looking for desktop number')
    rex = re.compile('New .* desktop is (?P<host>\w*):(?P<port>\d*)')

    # "New 'cn002.cm.cluster:29 (dlang)' desktop at :29 on machine cn002.cm.cluster"
    rex2 = re.compile('New .* desktop at :(?P<port>\d*) on machine (?P<host>\w*)')

    # "Saving VNC password in /home/dlang/.vnc/passwd-guac-$SLURM_JOB_ID.txt"

    foundit = False
    for i in range(60):
        lines = open(jobfn).read().split('\n')
        for line in lines:
            m = rex.match(line)
            if m is not None:
                print()
                print('VNCHost %s' % m.group('host'))
                print('VNCPort %s' % m.group('port'))
                foundit = True
                break
            m = rex2.match(line)
            if m is not None:
                print()
                print('VNCHost %s' % m.group('host'))
                print('VNCPort %s' % m.group('port'))
                foundit = True
                break
            if line.startswith('Saving VNC password in'):
                words = line.split()
                fn = words[-1]
                print('VNCPasswordFile %s' % fn)
        if foundit:
            break
        time.sleep(1.)
        print('.', flush=True, end='')
    print()
    print('Remote Desktop started!')
    print()

    print()
    print()
    print('A window should now pop up saying that you have been Disconnected.')
    print()
    print('Please use the "Home" button to return to the main menu.')
    print()
    print('Then use your browser\'s "Reload" button to see your new desktop listed!')
    print()
    print()
    
    time.sleep(3)
    return 0
    
if __name__ == '__main__':
    sys.exit(main())



