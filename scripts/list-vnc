#! /usr/bin/python3
import sys
import os
import subprocess
import psutil
import argparse
import re

def remote():
    base = os.path.dirname(sys.argv[0])

    queue = 'sharedq'
    cmd = [os.path.join(base, 'sinfo'), '-p', queue, '-N', '-o', '%n', '--noheader']
    p = subprocess.run(cmd, stdout=subprocess.PIPE)
    s = p.stdout.decode()
    nodes = s.split('\n')
    nodes = [n for n in nodes if len(n)>0]
    print('Nodes in the VNC queue:', nodes)

    procs = []
    for host in nodes:
        cmd = ['ssh',
               '-F', os.path.join(base, 'tomcat/ssh_config'),
               '-i', os.path.join(base, 'tomcat/id_guacamole_computenode'),
               'guacamole@'+host,
               os.path.join(base, 'list-vnc')]
        print(' '.join(cmd))
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        procs.append((host, p))
    rtn = 0
    for host,p in procs:
        s,e = p.communicate()
        lines = s.split('\n')
        for x in lines + e.split('\n'):
            if len(x):
                print('#', host, x)
        lines = [line for line in lines if line.startswith(':')]
        for line in lines:
            print(host, line)
        if p.returncode != 0:
            rtn = p.returncode
    return rtn

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--remote', action='store_true', default=False)
    opt = parser.parse_args()

    if opt.remote:
        return remote()

    for proc in psutil.process_iter():
        cmd = proc.cmdline()
        if len(cmd) == 0:
            continue
        # Search for VNC sessions whose command-lines look like this:
        #['/usr/bin/Xvnc', ':1', '-auth', '/home/akogios/.Xauthority', '-desktop', 'cn001:1 (akogios)', '-fp', '/usr/share/fonts/X11//misc,/usr/share/fonts/X11//Type1', '-geometry', '1024x768', '-pn', '-rfbauth', '/home/akogios/.vnc/passwd', '-rfbport', '5901', '-rfbwait', '30000']
        # or
        # /usr/bin/Xtigervnc :30 -desktop cn002.cm.cluster:30 (dlang) -auth /home/dlang/.Xauthority -geometry 1900x1200 -depth 24 -rfbwait 30000 -rfbauth /home/dlang/.vnc/passwd-guac-270808 -rfbport 5930 -pn -localhost -SecurityTypes VncAuth
        
        if not cmd[0] in ['/usr/bin/Xvnc', '/usr/bin/Xtigervnc']:
            continue

        port = cmd[1]
        if not port.startswith(':'):
            continue

        # Search for "-rfbauth <password-file>"
        # AND expect that password-file is like passwd-guac-270804.txt
        passwd_fn = None
        jobid = 0
        rex = re.compile(r'passwd-guac-(?P<jobid>\d*)\.txt')
        for a1,a2 in zip(cmd, cmd[1:]):
            if a1 == '-rfbauth':
                # Check for .txt file (as created by run-vnc)
                txtfn = a2 + '.txt'
                if os.path.exists(txtfn):
                    passwd_fn = txtfn
                    m = rex.match(os.path.basename(txtfn))
                    if m is not None:
                        print('Filename matched RE')
                        jobid = int(m.group('jobid'))
                    break

        
        user = proc.username()
        print('%s %s %s %i' % (port, user, passwd_fn, jobid))

    return 0

if __name__ == '__main__':
    sys.exit(main())
